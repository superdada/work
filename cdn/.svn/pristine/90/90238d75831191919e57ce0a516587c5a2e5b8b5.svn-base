package cn.com.ailbb.Dao;

import cn.com.ailbb.database.Dialect;
import cn.com.ailbb.util.TimeUtil;
import net.sf.json.JSONObject;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.poi.ss.usermodel.DateUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.*;

import cn.com.ailbb.util.DataUtil;
import org.springframework.stereotype.Repository;

/**
 * Created by xzl on 2017/5/16.
 */
@Repository
public class AnalysisReportDaoImpl implements AnalysisReportDao {

    @Autowired
    JdbcTemplate jdbcTemplateVertica;
    @Autowired
    private Dialect dialect; //如果多个数据库方言，哪个实现类注入

    public List<Map<String, Object>> getPerformanceData(Map map) throws Exception {
        StringBuffer sql = new StringBuffer();
        sql.append("select distinct ").append(getTimeSelPart(MapUtils.getIntValue(map, "timeType"))).append(" as ttime")
                .append(",http_200_rate*100 as \"http_200_rate\",http_206_rate*100 as \"http_206_rate\",http_301_rate*100 as \"http_301_rate\",http_302_rate*100 as \"http_302_rate\",")
                .append("http_306_rate*100 as \"http_306_rate\",http_other_rate*100 as \"http_other_rate\",slow_100k_rate*100 as \"低于_100k_rate\",up_100k_rate*100 as \"高于_100k_rate\",")
                .append("up_500k_rate*100 as \"高于_500k_rate\",up_2000k_rate*100 as \"高于_2000k_rate\",hit_dl_speed / 1024 as \"hit_dl_speed\",miss_dl_speed / 1024 as \"miss_dl_speed\",")
                .append("bandwidth as \"bandwidth\",visit_cnt as \"visit_cnt\",delay as \"delay\"")
                .append(" from ").append(MapUtils.getString(map, "tableName"))
                .append(" where ttime >= '").append(MapUtils.getString(map, "timeStart"))
                .append("' and ttime <= '").append(MapUtils.getString(map, "timeEnd")).append("'")
                .append(" and cache_cdn in("+(MapUtils.getString(map, "cache_cdn")==null?"'ALL',NULL)":"'"+MapUtils.getString(map, "cache_cdn")+"')"))
                .append(getWherePartByWD(map)).append(" order by ttime");
        String sql_last = sql.toString();
        return jdbcTemplateVertica.queryForList(sql_last);
    }


    @Override
    public  Map<String,List<String>>  getConditionEnum(Map map) throws Exception {
        StringBuffer sql = new StringBuffer();
        String first_value ="";
        List<Map<String, Object>> result_content = new ArrayList<Map<String, Object>>();
        Map<String,List<String>> result=new HashMap<String,List<String>>();
        JSONObject allrelation = JSONObject.fromObject(MapUtils.getString(map, "relation"));
        Iterator iterator = allrelation.keys();
        while(iterator.hasNext()){
            String   key = (String) iterator.next();
            JSONObject  value = JSONObject.fromObject(allrelation.getString(key));
            if(result.get(key) ==null){
                sql.setLength(0);
                sql.append("select distinct "+selectBoxChange.get(key)+" as \"text\" from "+tableChange.get(key)+" limit 20");
                result_content.clear();
                result_content=jdbcTemplateVertica.queryForList(sql.toString());
                List<String> tmpresult =  new ArrayList<String>();
                for(int i= 0;i<result_content.size();i++){
                    tmpresult.add(DataUtil.ObjectToString(result_content.get(i).get("text")));
                }
                result.put(key,tmpresult);
            }
            first_value =result.get(key).get(0);
            if(!DataUtil.ObjectToString(value.get("conId")).equals("")){
                sql.setLength(0);
                sql.append("select distinct "+selectBoxChange.get(DataUtil.ObjectToString(value.get("conId")))+" as \"text\" from " +tableChange.get(key))
                        .append(" where " +selectBoxChange.get(key) +" = '"+ first_value+ "' limit 20 ");
                result_content.clear();
                result_content=jdbcTemplateVertica.queryForList(sql.toString());
                List<String> tmpresult =  new ArrayList<String>();
                for(int i= 0;i<result_content.size();i++){
                    tmpresult.add(DataUtil.ObjectToString(result_content.get(i).get("text")));
                }
                result.put(DataUtil.ObjectToString(value.get("conId")),tmpresult);
            }
        }
        return result;

    }

    @Override
    public  Map<String,Object>  getConditionTime(Map map) throws Exception {
        StringBuffer sql = new StringBuffer();
        String TimeType = MapUtils.getString(map, "TimeType");
        String cdn_cache = MapUtils.getString(map, "cdn_cache");
        String Dimension = MapUtils.getString(map, "Dimension");
        Map<String,Object> result=new HashMap<String,Object>();
        if(TimeType.equals("2")){
            String table = "shcdn.r_report2_20000";
            sql.setLength(0);
            sql.append("select ttime from "+table+" order by ttime desc limit 1");
            Map<String,Object> ttime = jdbcTemplateVertica.queryForMap(sql.toString());
            String timeValueE = TimeUtil.DateToText(TimeUtil.TextToDate(DataUtil.ObjectToString(ttime.get("ttime"))));
            String timeValueS= TimeUtil.DateToText(new Date(TimeUtil.MinTextToDate(timeValueE).getTime() - 24*60*60*1000));
            result.put("timeValueE_2",timeValueE);
            result.put("timeValueS_2",timeValueS);
        }else if(TimeType.equals("3")){
            String table = "shcdn.r_report2_30000";
            sql.setLength(0);
            sql.append("select ttime from "+table+" order by ttime desc limit 1");
            Map<String,Object> ttime = jdbcTemplateVertica.queryForMap(sql.toString());
            String timeValueE = TimeUtil.TextToDayDateText(TimeUtil.DayTextToDate(DataUtil.ObjectToString(ttime.get("ttime"))));
            String timeValueS= TimeUtil.TextToDayDateText(new Date(TimeUtil.DayTextToDate(DataUtil.ObjectToString(ttime.get("ttime"))).getTime() - 24*60*60*1000));
            result.put("timeValueE_3",timeValueE);
            result.put("timeValueS_3",timeValueS);
        }else if(TimeType.equals("4")){
            String table = "shcdn.r_report2_40000";
            sql.setLength(0);
            sql.append("select ttime from "+table+" order by ttime desc limit 1");
            Map<String,Object> ttime = jdbcTemplateVertica.queryForMap(sql.toString());
            String timeValueE = TimeUtil.TextToDayDateText(TimeUtil.DayTextToDate(DataUtil.ObjectToString(ttime.get("ttime"))));
            String timeValueS= TimeUtil.TextToDayDateText(new Date(TimeUtil.DayTextToDate(DataUtil.ObjectToString(ttime.get("ttime"))).getTime() - 24*7*60*60*1000));
            result.put("timeValueE_4",timeValueE);
            result.put("timeValueS_4",timeValueS);
        }else if(TimeType.equals("5")){
            String table = "shcdn.r_report2_50000";
            sql.setLength(0);
            sql.append("select ttime from "+table+" order by ttime desc limit 1");
            Map<String,Object> ttime = jdbcTemplateVertica.queryForMap(sql.toString());
            String timeValueE = TimeUtil.TextToDayDateText(TimeUtil.DayTextToDate(DataUtil.ObjectToString(ttime.get("ttime"))));
            Calendar c = Calendar.getInstance();
            c.setTime(TimeUtil.DayTextToDate(DataUtil.ObjectToString(ttime.get("ttime"))));
            c.add(Calendar.MONTH, -1);
            String timeValueS= TimeUtil.TextToDayDateText(c.getTime());
            result.put("timeValueE_5",timeValueE);
            result.put("timeValueS_5",timeValueS);
        }
        return  result;
    }

    @Override
    public List<String>  getSearchResult(Map<String,Object> map) throws Exception{
        StringBuffer sql = new StringBuffer();
        List<Map<String, Object>> result_content = new ArrayList<Map<String, Object>>();
        List<String> tmpresult =  new ArrayList<String>();
        String id = MapUtils.getString(map, "conditionId");
        for (String key : map.keySet()) {
            if( key.equals("searchValue")){
                String searchValue =DataUtil.ObjectToString(map.get(key));
                sql.setLength(0);
                sql.append("select distinct "+ selectBoxChange.get(id) +" as \"text\" from "+tableChange.get(id))
                        .append(" where "+selectBoxChange.get(id)+" like '%").append(searchValue).append("%'")
                        .append( " limit 20");
                break;
            } else if(!(key.equals("method") || key.equals("conditionId")) ){
                String parentid =selectBoxChange.get(key);
                String parentidValue = DataUtil.ObjectToString(map.get(key));
                sql.setLength(0);
                sql.append("select distinct "+ selectBoxChange.get(id) +" as \"text\" from "+tableChange.get(id))
                        .append(" where "+parentid+" = '"+parentidValue+"'")
                        .append( " limit 20");
                break;
            }

        }
        result_content.clear();
        result_content=jdbcTemplateVertica.queryForList(sql.toString());
        for(int i= 0;i<result_content.size();i++){
            tmpresult.add(DataUtil.ObjectToString(result_content.get(i).get("text")));
        }
        return tmpresult;
    }

    @Override
    public List<String>  getMultiSearchResult(Map<String,Object> map) throws Exception{
        StringBuffer sql = new StringBuffer();
        List<Map<String, Object>> result_content = new ArrayList<Map<String, Object>>();
        List<String> tmpresult =  new ArrayList<String>();
        String id = MapUtils.getString(map, "conditionId");
        String WherePart ="";
        String searchValue = (MapUtils.getString(map, "searchValue") == null?null: MapUtils.getString(map, "searchValue"));
        sql.setLength(0);
        sql.append("select distinct "+ selectBoxChange.get(id) +" as \"text\" from "+tableChange.get(id));
        for(Map.Entry<String, Object> entry : map.entrySet()){
            if(!("method".equals(DataUtil.ObjectToString(entry.getKey()))
                    ||"conditionId".equals( DataUtil.ObjectToString(entry.getKey()))
                    ||"searchValue".equals(DataUtil.ObjectToString(entry.getKey())))){
                String indexvalue = DataUtil.ObjectToString(entry.getValue());
                if(indexvalue.indexOf(",") > 0){
                    String[] sourceStrArray=indexvalue.split(",");
                    indexvalue ="";
                    for(int i = 0 ;i<sourceStrArray.length;i++){
                        indexvalue +=("'"+sourceStrArray[i]+"'");
                        if(i !=sourceStrArray.length -1 ){
                            indexvalue +=",";
                        }
                    }
                    WherePart += selectBoxChange.get(entry.getKey()) +" in( " + indexvalue +" ) and ";

                }else {
                    WherePart += selectBoxChange.get(entry.getKey()) +" in( '" + indexvalue +"' ) and ";
                }
            }
        }
        if(DataUtil.checkStr(searchValue)){
            WherePart+=  selectBoxChange.get(id)+" like '%"+searchValue+"%'";
        }else {
            if(!("").equals(WherePart)){
                WherePart =WherePart.substring(0,WherePart.length()-4);
            }
        }
        if(!("").equals(WherePart)){
            sql.append( " where "+WherePart+" limit 20");
        }else {
            sql.append(" limit 20");
        }
        result_content.clear();
        result_content=jdbcTemplateVertica.queryForList(sql.toString());
        for(int i= 0;i<result_content.size();i++){
            tmpresult.add(DataUtil.ObjectToString(result_content.get(i).get("text")));
        }
        return tmpresult;
    }
   /* public List getConditionEnum(Map map) throws Exception {
        StringBuffer sql = new StringBuffer();
        String id = MapUtils.getString(map, "conditionId");
        String cityName = MapUtils.getString(map, "cityName");
        String dataCenterId = MapUtils.getString(map, "dataCenter");
        String searchValue = MapUtils.getString(map, "searchValue", "");
        if ("dataCenter".equals(id)) {
            sql.append("select dc_name as \"text\",dc_id as \"id\" from shcdn.c_conf_datacenter")
                    .append(" where (dc_city = '").append(cityName).append("市'")
                    .append(" or dc_city = '").append(cityName).append("')")
                    .append(" group by dc_name,dc_id  order by dc_id asc");
        } else if ("server".equals(id)) {
            sql.append("select equipment_ip as \"id\",equipment_ip as \"text\" from shcdn.c_conf_datacenter")
                    .append(" where (dc_city = '").append(cityName).append("市'")
                    .append(" or dc_city = '").append(cityName).append("')")
                    .append(" and dc_id = ").append(dataCenterId)
                    .append(" and equipment_ip like '%").append(searchValue).append("%'")
                    .append(" group by equipment_ip limit 20");
        } else if ("ICP".equals(id)) {
            sql.append("select icp_name as \"text\",icp_id as \"id\" from shcdn.c_conf_icp")
                    .append(" where icp_name like '%").append(searchValue).append("%'")
                    .append(" group by icp_name,icp_id limit 20");
        }
        return jdbcTemplateVertica.queryForList(sql.toString());
    }*/


    @Override
    public List<Map<String, Object>> getFlowChartData(Map map) throws Exception {
        StringBuffer sql = new StringBuffer();
        sql.append("select ").append(getTimeSelPart(MapUtils.getIntValue(map, "timeType"))).append("as \"ttime\",bandwidth,visit_cnt,delay from ")
                .append(MapUtils.getString(map, "tableName")).append(" where ttime >= '")
                .append(MapUtils.getString(map, "timeStart")).append("' and ttime <= '")
                .append(MapUtils.getString(map, "timeEnd")).append("'")
                .append(" and cache_cdn in("+(MapUtils.getString(map, "cache_cdn")==null?"'ALL',NULL)":"'"+MapUtils.getString(map, "cache_cdn")+"')"))
                .append(getWherePartByWD(map)).append(" order by ttime");
        String sql_last = sql.toString();
        return jdbcTemplateVertica.queryForList(sql_last);
    }

    /**
     * 维度获取查询条件
     *
     * @param map
     * @return
     */
    private String getWherePartByWD(Map map) {
        String wdName = MapUtils.getString(map, "wdName");
        String cityName1 = MapUtils.getString(map, "cityName1");
        String cityName2 = MapUtils.getString(map, "cityName2");
        String dataCenter = MapUtils.getString(map, "dataCenter");
        String ICP = MapUtils.getString(map, "ICP1");
        String server = MapUtils.getString(map, "server1");
        String domain = MapUtils.getString(map, "domain1");
        String serviceTypeCategory=MapUtils.getString(map, "serviceTypeCategory");
        String serviceNameCategory=MapUtils.getString(map, "serviceNameCategory");
        String wherePart = "";
        if ("fringe_node".equals(wdName)) {
            if (DataUtil.checkStr(cityName1)){
                String cityname = "";
                if(cityName1.indexOf("市")>0){
                    cityname =cityName1.substring(0,cityName1.indexOf("市"));
                    wherePart += " and (city_name = '" + cityName1 + "' or city_name = '" + cityname + "')";
                }else {
                    wherePart += " and (city_name = '" + cityName1 + "' or city_name = '" + cityName1 + "市')";
                }
            }
        } else if ("dataCenter".equals(wdName)) {
            if (DataUtil.checkStr(dataCenter))
                wherePart += " and content_center = '" + dataCenter + "'";
        } else if ("ICP".equals(wdName) ) {
            if (DataUtil.checkStr(ICP)){
                wherePart += " and icp_name = '" + ICP + "'";
            }else if(DataUtil.checkStr(domain)){
                wherePart += " and domain_name = '" + domain + "'";
            }
        } else if ("User".equals(wdName)) {
            if (DataUtil.checkStr(cityName2)){
                String cityname = "";
                if(cityName2.indexOf("市")>0){
                    cityname =cityName2.substring(0,cityName2.indexOf("市"));
                    wherePart += " and (user_city = '" + cityName2 + "' or user_city = '" + cityname + "')";
                }else {
                    wherePart += " and (user_city = '" + cityName2 + "' or user_city = '" + cityName2 + "市')";
                }
            }

        }
        else if("serviceType".equals(wdName)){
            if (DataUtil.checkStr(serviceTypeCategory))
                wherePart += " and service_type = '" + serviceTypeCategory + "'";
        }
        else if("serviceName".equals(serviceNameCategory)){
            if (DataUtil.checkStr(serviceNameCategory))
                wherePart += " and service_name = '" + serviceNameCategory + "'";
        }
        else if("server".equals(wdName)){
            if (DataUtil.checkStr(server))
                wherePart += " and server_address = '" + server + "'";
        }
        return wherePart;
    }
   public String getTimeSelPart(int timeType){
        String timeSelPart = "";
       switch (timeType) {
           case 60:
               timeSelPart = dialect.datetimeTostring("ttime", "YYYY-MM-DD hh:mm");
               break;
           case 1440:
               timeSelPart = dialect.datetimeTostring("ttime", "yyyy-MM-dd");
               break;
           case 10080:
               timeSelPart = dialect.datetimeTostring("ttime", "yyyy-MM-dd");
               break;
           case 44640:
               timeSelPart = dialect.datetimeTostring("ttime", "yyyy-MM");
               break;
       }
       return timeSelPart;
   }

    private static Map<String, String> selectBoxChange = new HashMap<String,String>(){{
        put("cityName1","city_name");
        put("cityName2","city");
        put("dataCenter","content_center");
        put("ICP1","icp_name");
        put("ICP2","icp_name");
        put("domain1","domain_name");
        put("domain2","domain_name");
        put("serviceTypeCategory","");
        put("serviceNameCategory","");
        put("server1","equipment_ip");
        put("server2","equipment_ip");
    }};
    private static Map<String, String> tableChange = new HashMap<String,String>(){{
        put("cityName1","shcdn.c_conf_datacenter_new");
        put("cityName2","shcdn.c_conf_client_address_new");
        put("dataCenter","shcdn.c_conf_datacenter_new");
        put("ICP1","shcdn.c_conf_icp_new");
        put("ICP2","shcdn.c_conf_icp_new");
        put("domain1","shcdn.c_conf_icp_new");
        put("domain2","shcdn.c_conf_icp_new");
        put("serviceTypeCategory","");
        put("serviceNameCategory","");
        put("server1","shcdn.c_conf_datacenter_new");
        put("server2","shcdn.c_conf_datacenter_new");
    }};

}
