/**
 * Created by zhongguohua
 * on 2017/3/20.
 */
var form;
var currntDimension = "domain";//当前维度,默认地市 dcServer
var currentTimeType = "2";//当前时间粒度,默认小时
var initTimes = 2;//根据当前控件联动情况,会初始化3次
var currentTimes = 0;//标记当前控件初始化次数
var callbackFn;//回调函数
//当前选中cdn_cache_all的值
var curr_cdn_cache_all='ALL';

//地市查询条件枚举
var cityNameArr = [{id: "深圳", text: "深圳"}, {id: "广州", text: "广州"}, {id: "珠海", text: "珠海"}, {id: "中山", text: "中山"},
    {id: "佛山", text: "佛山"}, {id: "汕头", text: "汕头"}, {id: "东莞", text: "东莞"}, {id: "惠州", text: "惠州"},
    {id: "潮州", text: "潮州"}, {id: "河源", text: "河源"}, {id: "汕尾", text: "汕尾"}, {id: "湛江", text: "湛江"},
    {id: "肇庆", text: "肇庆"}, {id: "梅州", text: "梅州"}, {id: "茂名", text: "茂名"}, {id: "云浮", text: "云浮"},
    {id: "阳江", text: "阳江"}, {id: "揭阳", text: "揭阳"}, {id: "清远", text: "清远"}, {id: "江门", text: "江门"},
    {id: "韶关", text: "韶关"}];
var cityList = [
    "深圳市", "广州市", "珠海市", "中山市", "佛山市",
    "汕头市", "东莞市", "惠州市", "潮州市", "河源市",
    "汕尾市", "肇庆市", "梅州市", "茂名市", "云浮市",
    "湛江市", "阳江市", "揭阳市", "清远市", "江门市", "韶关市"
];
/*var cityNameArr = [{id: "深圳", text: "深圳"},
 {id: "佛山", text: "佛山"}];
 var cityList = [
 "深圳市", "佛山市"
 ];*/

//查询条件联动，
var conditionReflesh = {
    cityName: {conId: "dataCenter"}
    //dataCenter: {conId: "server"}
};


$(function () {
    initTimeSelect();
    initSelectOption("cityName_div", cityNameArr, '深圳',false);
    setTimeout(function () {
        //refleshConditionSync("ICP");
        refleshConditionSync("server");
    }, 3000);
});

function initDiv() {
    var width = $("body").width();
    width = width > 1200 ? width : 1200;
    $("#conditionDiv").width(width);
}


function initWdName(wdNameArr, initFn) {
    callbackFn = initFn;
    var html = "";
    for (var k in wdNameArr) {
        if (k == 0) {
            html += '<li class="my-options-on" type=' + wdNameArr[k]['type'] + '>'
                + wdNameArr[k]['text'] + '</li>';
        } else {
            html += '<li class="my-options-off" type=' + wdNameArr[k]['type'] + '>'
                + wdNameArr[k]['text'] + '</li>';
        }
    }
    $("#WDSelected").empty().append(html);
    initCondition(wdNameArr[0]['text'], [wdNameArr[0]], initFn);
    bindEvent(wdNameArr);
}

//根据维度初始化查询条件
function initCondition(wdName, wdNameArr, initFn) {
    var conditions;
    for (var i = 0, len = wdNameArr.length; i < len; i++) {
        if (wdNameArr[i]['text'] == wdName) {
            conditions = wdNameArr[i]['conditions'].split(",");
        }
    }
    if (wdName) {
        var $obj = $("#WDSelected li:contains('" + wdName + "')");
        $obj.addClass('my-options-on')
            .siblings().removeClass("my-options-on").addClass("my-options-off");
    }
    $("#searchCondition .floatDiv").hide();
    for (i = 0, len = conditions.length; i < len; i++) {
        $("#" + conditions[i] + "_div").show();
    }

    //initSelectOption("cityName_div", cityNameArr, '广州', initFn);
   // initSelectOption("cityName_div", cityNameArr, '深圳', initFn);
    //initSelectOption("cityName_div", cityNameArr, '深圳', initFn);

}

//初始化下拉框
function initSelectOption(ele, data, defaultText, initFn) {
    currentTimes++;
    var size = data.length;
    var id = ele.substring(0, ele.indexOf("_"));
    var html = "<select id='" + id + "' lay-filter='" + id + "'";
    if ($("#" + id).attr("lay-search-sync") !== undefined) {
        html += " lay-search-sync lay-search";
    }
    html += ">";
    html += "<option value=''></option>";
    for (var i = 0; i < size; i++) {
        html += "<option value='" + data[i]['id'] + "'";
        if (defaultText && data[i]['text'] == defaultText) {
            html += " selected ";
        } else if (!defaultText && i == 0) {
            html += " selected ";
        }
        html += ">" + data[i]['text'] + "</option>"
    }
    html += "</select>";
    $("#" + ele + " .layui-input-block").empty().append(html);
    layui.use('form', function (ele) {
        form = layui.form();
        form.render("select");
        if (conditionReflesh[id]) {
            form.on("select(" + id + ")", function (obj) {
                obj.initFn = initFn;
                obj.targetCondition = conditionReflesh[id]['conId'];
                obj.refreshCondition = conditionReflesh[conditionReflesh[id]['conId']];
                initConditionByOthers(obj);
            });
        } else if (typeof callbackFn === 'function' && currentTimes === initTimes) {
            callbackFn();//回调，在控件初始化完后
        }
        $(".lay-search-sync").next().find("input.layui-input.layui-unselect").keyup(function (ele) {
            var id = $(ele.target).parents(".layui-unselect").prev().attr("id");
            refleshConditionSync(id);
        });
    });
    if (conditionReflesh[id] && size > 0) {
        var obj = {};
        obj.initFn = initFn;
        obj.targetCondition = conditionReflesh[id]['conId'];
        obj.refreshCondition = conditionReflesh[conditionReflesh[id]['conId']];
        obj.elem = {};
        obj.elem.id = id;
        obj.value = data[0]['id'];
        initConditionByOthers(obj);
    }
}

//下拉联动
function initConditionByOthers(obj) {
    var url =  AppBase + "/analyreport.do?method=request2";
    var param = {
        conditionId: obj.targetCondition,
        conditionDiv: obj.targetCondition + "_div"
    };
    param[obj.elem.id] = obj.value;
    $.post(url, param, function (data) {
        initSelectOption(param.conditionDiv, data.data, '', obj.initFn);
    }, "JSON");
}
//根据时间粒度改变时间控件
function initDateByType(timeType) {
    $("#laydate_table").show();
    if (timeType == 10080) {
        $('.laydate_table tbody tr').find('td:not(:last-child)').addClass('laydate_void');
    } else if (timeType == 44640) {
        $("#laydate_table").hide();
    }
}
//时间段改变成时间点
function changeDateCom(labelText) {
    labelText = labelText ? labelText : "时间选择";
    $("#timeLable").html(labelText);
    $("#dateEnd").hide();
}
//初始化时间控件
function initTimeSelect() {
    layui.use('laydate', function () {
        var laydate = layui.laydate;
        var dateOptions = {
            event: 'click', //触发事件
            format: 'YYYY-MM-DD hh:00:00', //日期格式
            max: '2099-12-31 23:00:00',
            istime: true, //是否开启时间选择
            isclear: true, //是否显示清空
            istoday: false, //是否显示今天
            issure: true //是否显示确认
        };
        var start = $.extend({}, dateOptions, {
            //min: laydate.now(),
            choose: function (datas) {
                end.min = datas; //开始日选好后，重置结束日的最小日期
                end.start = datas; //将结束日的初始值设定为开始日
                var timeType = $("#timeTypeSelected .my-options-on").val();
                $.cookie("timeValueS_" + timeType, datas);
            }
        });

        var end = $.extend({}, dateOptions, {
            choose: function (datas) {
                start.max = datas; //结束日选好后，重置开始日的最大日期
                var timeType = $("#timeTypeSelected .my-options-on").val();
                $.cookie("timeValueE_" + timeType, datas);
            }
        });
        $("#timeStart").unbind('click');
        $("#timeStart").click(function () {
            var timeType = $("#timeTypeSelected .my-options-on").val();
            start.istime = timeType == 60;
            start.format = getDateFormat(timeType, "laydate");
            start.elem = this;

            start.onMonthChange = function () {
                initDateByType(timeType);
            };
            start.onYearChange = function () {
                initDateByType(timeType);
            };
            laydate(start);

            initDateByType(timeType);
        });
        $("#timeEnd").unbind('click');
        $("#timeEnd").click(function () {
            var timeType = $("#timeTypeSelected .my-options-on").val();
            end.istime = timeType == 60;
            end.format = getDateFormat(timeType, "laydate");
            end.elem = this;
            end.onMonthChange = function () {
                initDateByType(timeType);
            };
            end.onYearChange = function () {
                initDateByType(timeType);
            };
            laydate(end);
            initDateByType(timeType);
        });
    });
    //$("#timeStart").val('2017-02-21 00:00:00');//演示需要,设置有数据的时间
    //$("#timeEnd").val('2017-02-21 23:00:00');//演示需要,设置有数据的时间
    $("#timeStart").val('2017-03-08 00:00:00');//演示需要,设置有数据的时间
    $("#timeEnd").val('2017-03-08 23:00:00');//演示需要,设置有数据的时间
}

/**
 * 功能：
 * 		过滤条件CDN/CACHE/ALL单击响应处理
 **/
function choiceTypeQueryCondition(){
	$("#cdn_cache_all li").click(function(even){
		 curr_cdn_cache_all=$(this).text();
		 $(this).siblings().removeClass("my-options-on");
//		 $(this).removeClass("my-options-off").siblings().removeClass("my-options-on");
		 $(this).addClass("my-options-on");
//		 alert(curr_cdn_cache_all);
	});
}

function bindEvent(wdNameArr) {
    $("#WDSelected li").click(function (ele) {
        currntDimension = $(ele.target).attr('type');
       // $(ele.target).addClass('my-options-on')
      //      .siblings().removeClass("my-options-on").addClass("my-options-off");
        initCondition($(ele.target).text(), wdNameArr, false);
    });
    $("#timeTypeSelected li").click(function (ele) {
        currentTimeType = $(ele.target).attr('type');
        var currentDateType = $(ele.target).val();
        $(ele.target).addClass('my-options-on')
            .siblings().removeClass("my-options-on").addClass("my-options-off");

        initTimeSelect();
        var format = getDateFormat(currentDateType);
        //var date = new Date("2017/02/21");
        var date = new Date("2017/03/08");
        if (currentDateType == 10080) {
            date = new Date("2017/03/08");
            /*while (date.getDay() != 6) {
             date.setDate(date.getDate() - 1);
             }*/
        }
        if ($.cookie("timeValueS_" + currentDateType)) {
            $("#timeStart").val($.cookie("timeValueS_" + currentDateType));
        } else {
            $("#timeStart").val(date.format(format));
            $.cookie("timeValueS_" + currentDateType, date.format(format))
        }
        if ($.cookie("timeValueE_" + currentDateType)) {
            $("#timeEnd").val($.cookie("timeValueE_" + currentDateType));
        } else {
            $("#timeEnd").val(date.format(format));
            $.cookie("timeValueE_" + currentDateType, date.format(format))
        }
    });
}

//获取查询条件的值,有的搜索框没显示，会不会把值也传过去？
function getConditionParam() {
    var icpValue = $("#ICP").next().find("input").attr("idValue");
    var serverValue = $("#server").next().find("input").attr("idValue");
//    var typeValue=curr_cdn_cache_all;
    return {
        timeStart: $("#timeStart").val(),
        timeEnd: $("#timeEnd").val(),
        timeType: $("#timeTypeSelected .my-options-on").val(),
        wdName: $("#WDSelected .my-options-on").text(),
        cityName: $("#cityName").val(),
        dataCenter: $("#dataCenter").val(),
        ICP: icpValue ? icpValue : $("#ICP").val(),
        server: serverValue ? serverValue : $("#server").val(),
        cache_cdn:curr_cdn_cache_all
    }
}

//开始-结束时间的周期数组
function getTimeSlot(start, end, type) {
    var sd = new Date(start);
    var ed = new Date(end);
    var timeSlot = [];
    while (true) {
        var formatStr;
        if (type == 60) {
            formatStr = sd.format("yyyy-MM-dd HH:mm:ss");
            sd.setHours(sd.getHours() + 1);
        } else if (type == 1440) {
            formatStr = sd.format("yyyy-MM-dd");
            sd.setDate(sd.getDate() + 1);
        } else if (type == 10080) {
            formatStr = sd.format("yyyy-MM-dd");
            sd.setDate(sd.getDate() + 7);
        } else if (type == 44640) {
            formatStr = sd.format("yyyy-MM-dd");
            sd.setMonth(sd.getMonth() + 1);
        }
        timeSlot.push(formatStr);
        if (sd.getTime() > ed.getTime()) {
            return timeSlot.join(",");
        }
    }
}
//验证查询条件是否设置值
function validateForm() {
    var $obj = $("#searchCondition .floatDiv:visible");
    var size = $obj.length;
    var msg = {errorMsg: "", isPass: true};
    var idArray = [];
    var values = getConditionParam();
    for (var i = 0; i < size; i++) {
        var item = $obj.eq(i);
        var id = item.attr("id").split("_")[0];
        var text = item.find("label").text();
        if (!values[id]) {
            idArray.push(id);
            msg.errorMsg += "[" + text + "]条件不能为空<br>";
            msg.isPass = false;
        }
    }
    if ($("#timeStart").is(":visible") && !$("#timeStart").val()) {
        msg.errorMsg += "[开始时间]条件不能为空<br>";
        msg.isPass = false;
        idArray.push("timeStart");
    }
    if ($("#timeEnd").is(":visible") && !$("#timeEnd").val()) {
        msg.errorMsg += "[结束时间]条件不能为空<br>";
        msg.isPass = false;
        idArray.push("timeEnd");
    }
    msg.idArray = idArray;
    return msg;
}

/**
 * 异步模糊搜索选择框-请求数据
 * @param eleId
 */
function refleshConditionSync(eleId) {
    var url =  AppBase + "/analyreport.do?method=request2";
    var param = {
        conditionId: eleId,
        cityName: $("#cityName").val(),
        dataCenter: $("#dataCenter").val(),
        searchValue: $("#" + eleId).next().find("input").val()
    };
    $.post(url, param, function (data) {
        initSearchOptions(eleId, data.data);
    }, "JSON");
}
//异步模糊搜索选择框-数据渲染
function initSearchOptions(eleId, data) {
    var $ele = $("#" + eleId);
    var html_op = "<option value=''></option>";
    var html_dd = "";
    for (var i = 0, len = data.length; i < len; i++) {
        html_op += "<option value='" + data[i]['id'] + "'>" + data[i]['text']
            + "</option>";
        html_dd += "<dd lay-value='" + data[i]['id'] + "'>" + data[i]['text']
            + "</dd>"
    }
    $ele.empty().append(html_op);
    $ele.next().find("dl").empty().append(html_dd);
    $ele.next().find("dd").on('click', function (ele) {
        $(ele.target).addClass("layui-this").siblings().removeClass("layui-this");
        $("#" + eleId).next().removeClass("layui-form-selected")
            .find("input").val($(ele.target).text())
            .attr("idValue", $(ele.target).attr("lay-value"));
        ele.stopPropagation();
    })
}
//获取时间格式
function getDateFormat(timeType, formatType) {
    var format;
    if (timeType == 60) {
        format = formatType != "laydate" ? "yyyy-MM-dd HH:00:00" : "YYYY-MM-DD hh:00:00";
    } else if (timeType == 1440 || timeType == 10080) {
        format = formatType != "laydate" ? "yyyy-MM-dd" : "YYYY-MM-DD";
    } else if (timeType == 44640) {
        format = formatType != "laydate" ? "yyyy-MM-01" : "YYYY-MM-01";
    }
    return format;
}
