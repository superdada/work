<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <!-- 自定义的Shiro Filter-->
    <!--<bean id="sessionFilter" class="com.zhangwlter.SessionFilter"></bean>-->

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>

        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/web/module/login/login.jsp"/>

        <!--登陆成功后跳转的页面，From请求用response.sendRedirect跳转页面 -->
        <property name="successUrl" value="/web/module/cdn/cdn_index.jsp"/>

        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
        <property name="unauthorizedUrl" value="/web/module/undefind/unauthorized.jsp"/>

        <!-- 自定义的Shiro Filter-->
        <!--<property name="filters">-->
        <!--<map>-->
        <!--<entry key="session" value-ref="sessionFilter"/>-->
        <!--</map>-->
        <!--</property>-->

        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filterChainDefinitions">
            <value>
                <!--&lt;!&ndash;系统资源配置&ndash;&gt;-->
                /web/lib/** = anon

                <!-- &lt;!&ndash;模块资源配置&ndash;&gt;-->
                /web/module/login/** = anon
                /web/module/undefind/** = anon

                /web/module/cdn/fenxiang/** = anon

                /login.do = anon

                <!-- &lt;!&ndash;临时处理两个展现界面&ndash;&gt;
                /pfcsnapshot.do = anon
                /realtimeonline.do = anon
                /index_cp.jsp = anon
                /web/module/cdn/realtime_monitoring_cp.jsp = anon-->
                /** = authc
            </value>
        </property>
    </bean>

    <!--设置自定义realm -->
    <!--securityManager是shiro的核心，初始化时协调各个模块运行-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--单个realm使用realm,如果有多个realm，使用realms属性代替-->
        <property name="realm" ref="myRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <bean id="myRealm" class="cn.com.ailbb.filter.ShiroDbRealm"></bean>

    <!--realm配置，realm是shiro的桥梁，它主要是用来判断subject是否可以登录及权限等，设置session超时时间-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="600000"/>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


</beans>